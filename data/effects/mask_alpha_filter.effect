uniform float4x4 ViewProj;

uniform texture2d image;     // input RGBA
uniform texture2d alphamask; // alpha mask
uniform texture2d blurredBackground; // input RGBA
uniform texture2d bgImage;   // background image texture
uniform float2 bgImageOffset; // x for horizontal, y for vertical offset
uniform float2 bgImageScale;  // x for horizontal, y for vertical scale

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 PSAlphaMaskRGBAWithBlur(VertDataOut v_in) : TARGET
{
	float4 inputRGBA = image.Sample(textureSampler, v_in.uv);
	inputRGBA.rgb = max(float3(0.0, 0.0, 0.0), inputRGBA.rgb / inputRGBA.a);

	float4 outputRGBA;
	float a = (1.0 - alphamask.Sample(textureSampler, v_in.uv).r) * inputRGBA.a;
	outputRGBA.rgb = inputRGBA.rgb * a + blurredBackground.Sample(textureSampler, v_in.uv).rgb * (1.0 - a);
	outputRGBA.a = 1;
	return outputRGBA;
}

float4 PSTakeBlur(VertDataOut v_in) : TARGET
{
	// Return the blurred image, assume any masking is already applied to the blurred image
	return float4(blurredBackground.Sample(textureSampler, v_in.uv).rgb, 1.0);
}

float4 PSAlphaMaskRGBAWithoutBlur(VertDataOut v_in) : TARGET
{
	float4 inputRGBA = image.Sample(textureSampler, v_in.uv);
	inputRGBA.rgb = max(float3(0.0, 0.0, 0.0), inputRGBA.rgb / inputRGBA.a);

	float4 outputRGBA;
	float a = (1.0 - alphamask.Sample(textureSampler, v_in.uv).r) * inputRGBA.a;
	outputRGBA.rgb = inputRGBA.rgb * a;
	outputRGBA.a = a;
	return outputRGBA;
}

float4 PSAlphaMaskRGBAWithBGImage(VertDataOut v_in) : TARGET
{
    float4 inputRGBA = image.Sample(textureSampler, v_in.uv);
    
    // Apply offset and scale to the background image UV coordinates
    float2 bgUV = (v_in.uv - 0.5) / bgImageScale + 0.5 - bgImageOffset;
    float4 bgImageRGBA = bgImage.Sample(textureSampler, bgUV);

    float maskAlpha = 1.0 - alphamask.Sample(textureSampler, v_in.uv).r;

    float4 outputRGBA;
    
    // Blend the foreground (person) with the background image
    float3 blendedRGB = lerp(bgImageRGBA.rgb, inputRGBA.rgb, maskAlpha);
    
    // If the background image is transparent or out of bounds, show the original background
    float bgAlpha = bgImageRGBA.a * (bgUV.x >= 0 && bgUV.x <= 1 && bgUV.y >= 0 && bgUV.y <= 1);
    outputRGBA.rgb = lerp(inputRGBA.rgb, blendedRGB, bgAlpha);
    
    // Set alpha to 1 for full opacity
    outputRGBA.a = 1.0;

    return outputRGBA;
}

technique DrawWithBlur
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSTakeBlur(v_in);
	}
}

technique DrawWithFocalBlur
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSTakeBlur(v_in);
	}
}

technique DrawWithoutBlur
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSAlphaMaskRGBAWithoutBlur(v_in);
	}
}

technique DrawWithBGImage
{
    pass
    {
        vertex_shader = VSDefault(v_in);
        pixel_shader  = PSAlphaMaskRGBAWithBGImage(v_in);
    }
}